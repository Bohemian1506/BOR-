name: AI Autonomous Development

on:
  issues:
    types: [labeled]

jobs:
  ai-pair-development:
    if: contains(github.event.issue.labels.*.name, 'ai-auto')
    runs-on: ubuntu-latest
    
    permissions:
      issues: write
      pull-requests: write
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.0'
          bundler-cache: true
      
      - name: Install Gemini CLI
        run: |
          npm install -g @google-ai/generativelanguage
          # Note: Gemini CLI installation may vary based on the official package
          echo "Gemini CLI setup completed"
      
      - name: Setup environment
        run: |
          # Create outputs directory
          mkdir -p outputs
          chmod +x scripts/*.sh
          echo "Environment setup completed"
      
      - name: AI Autonomous Flow
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          echo "Starting AI autonomous development for Issue #$ISSUE_NUMBER"
          echo "Title: $ISSUE_TITLE"
          
          # Execute AI pair flow
          ./scripts/ai_pair_flow.sh "$ISSUE_TITLE: $ISSUE_BODY"
          
          # Display results
          echo "=== AI Development Results ==="
          echo "Implementation completed. Results:"
          ls -la outputs/
      
      - name: Create feature branch
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          git config --global user.name "AI Pair Programming Bot"
          git config --global user.email "ai-bot@battleofrunteq.dev"
          
          BRANCH_NAME="ai-auto-$ISSUE_NUMBER"
          git checkout -b $BRANCH_NAME
          echo "Created branch: $BRANCH_NAME"
      
      - name: Commit AI implementation
        env:
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          # Add all generated/modified files
          git add .
          
          # Create commit message with AI results
          COMMIT_MSG="🤖 AI自律実装: $ISSUE_TITLE

          この実装はClaude-Gemini自律連携システムによって生成されました。

          実装内容:
          - Issue #$ISSUE_NUMBER の要件に基づく自動実装
          - Claude Code: 分析・計画立案・品質検証
          - Gemini CLI: コード実装・テスト生成

          自動生成ファイル:
          $(git diff --name-only HEAD^ HEAD 2>/dev/null || echo 'New implementation files')

          🔍 レビュー推奨事項:
          - 実装ロジックの確認
          - セキュリティ考慮事項の検証
          - テストカバレッジの確認

          Co-authored-by: Claude-Code <claude@anthropic.com>
          Co-authored-by: Gemini-CLI <gemini@google.com>"
          
          git commit -m "$COMMIT_MSG" || echo "No changes to commit"
      
      - name: Push feature branch
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          BRANCH_NAME="ai-auto-$ISSUE_NUMBER"
          git push origin $BRANCH_NAME
      
      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          # Read AI implementation results for PR description
          IMPLEMENTATION_SUMMARY=""
          if [ -f outputs/gemini_implementation.txt ]; then
            IMPLEMENTATION_SUMMARY=$(head -20 outputs/gemini_implementation.txt)
          fi
          
          REVIEW_SUMMARY=""
          if [ -f outputs/claude_review_*.json ]; then
            REVIEW_FILE=$(ls outputs/claude_review_*.json | tail -1)
            REVIEW_SUMMARY=$(cat $REVIEW_FILE)
          fi
          
          # Create PR with detailed information
          gh pr create \
            --title "🤖 AI自律実装: $ISSUE_TITLE" \
            --body "## 🎯 実装概要
          この Pull Request は Claude-Gemini 自律連携システムによる自動実装です。

          **元Issue**: #$ISSUE_NUMBER
          **実装内容**: $ISSUE_TITLE

          ## 🔄 AI連携フロー
          1. **Claude Code** - 要件分析・技術計画立案
          2. **Gemini CLI** - 実際のコード実装・テスト生成  
          3. **Claude Code** - 品質検証・統合確認

          ## 📝 実装詳細
          \`\`\`
          $IMPLEMENTATION_SUMMARY
          \`\`\`

          ## 📊 品質評価
          \`\`\`json
          $REVIEW_SUMMARY
          \`\`\`

          ## ✅ 実装チェックリスト
          - [x] Rails 8 MVC パターン準拠
          - [x] Bootstrap 5.2 UI 実装
          - [x] RSpec テストケース作成
          - [x] セキュリティ考慮事項
          - [x] エラーハンドリング

          ## 🔍 レビュー要請
          - [ ] ビジネスロジックの妥当性確認
          - [ ] UI/UX の適切性確認
          - [ ] セキュリティ脆弱性チェック
          - [ ] パフォーマンス影響確認

          ## 🚀 デプロイ前確認事項
          - [ ] テスト実行: \`bundle exec rspec\`
          - [ ] Lint チェック: \`bundle exec rubocop\`
          - [ ] 開発環境動作確認: \`docker-compose up\`

          ---
          🤖 **自動生成**: Claude-Gemini 自律連携システム v1.0
          📅 **生成日時**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          " \
            --label "ai-auto,review-required" \
            --assignee "@me"
      
      - name: Update Issue with results
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          # Get final score and status from review
          FINAL_SCORE="未評価"
          FINAL_STATUS="完了"
          
          if [ -f outputs/claude_review_*.json ]; then
            REVIEW_FILE=$(ls outputs/claude_review_*.json | tail -1)
            FINAL_SCORE=$(grep '"score"' $REVIEW_FILE | grep -o '[0-9]*' | head -1)
            FINAL_STATUS=$(grep '"status"' $REVIEW_FILE | cut -d'"' -f4)
          fi
          
          # Comment on the original issue
          gh issue comment $ISSUE_NUMBER --body "## 🤖 AI自律実装完了

          **実装ステータス**: ✅ 完了
          **品質スコア**: $FINAL_SCORE/100
          **評価結果**: $FINAL_STATUS

          ### 📋 生成結果
          - 🔗 **Pull Request**: 自動作成されました
          - 📁 **実装ファイル**: AI連携により生成
          - 🧪 **テストケース**: RSpec テスト実装済み
          - 📊 **品質検証**: Claude Code による検証完了

          ### 🔍 次のステップ
          1. Pull Request をレビューしてください
          2. 必要に応じて手動調整を実施
          3. テスト実行とデプロイ

          詳細は作成された Pull Request をご確認ください。"